@use "src/styles/constants";
@use "src/styles/breakpoints";
@use "sass:map";

@mixin center-horizontally {
  display: inline-block;
  margin-block-start: auto;
  margin-inline-end: auto;
  margin-block-end: auto;
  margin-inline-start: auto;
}

@mixin center-vertically {
  display: flex;
  flex-direction: column;
  justify-content: center;
}

@mixin lighten-background-color {
  background-image: linear-gradient(
    to right,
    var(--color-background-lighten),
    var(--color-background-lighten)
  );
}

$scales-map: (
  default: (
    desktop: (
      1: 1,
      2: 1.5,
      3: 2,
      4: 2.5,
      5: 3,
      6: 3.5,
      7: 4,
      8: 4.5,
      9: 5,
      10: 5.5,
    ),
    mobile: (
      1: 1,
      2: 1.3,
      3: 1.5,
      4: 2.3,
      5: 2.8,
      6: 3.3,
      7: 3.8,
      8: 4.2,
      9: 4.7,
      10: 5.2,
    ),
  ),
  translation: (
    desktop: (
      1: 1,
      2: 1.2,
      3: 1.4,
      4: 1.7,
      5: 2.1,
      6: 2.6,
      7: 3.2,
      8: 3.8,
      9: 4.2,
      10: 4.5,
    ),
    mobile: (
      1: 1,
      2: 1.2,
      3: 1.4,
      4: 1.7,
      5: 2.1,
      6: 2.6,
      7: 3.2,
      8: 3.8,
      9: 4.2,
      10: 4.5,
    ),
  ),
  tafsir: (
    desktop: (
      1: 1,
      2: 1.2,
      3: 1.5,
      4: 1.9,
      5: 2.4,
      6: 3,
      7: 3.7,
      8: 4.5,
      9: 5,
      10: 5.5,
    ),
    mobile: (
      1: 1,
      2: 1.2,
      3: 1.5,
      4: 1.9,
      5: 2.4,
      6: 3,
      7: 3.7,
      8: 4.5,
      9: 5,
      10: 5.5,
    ),
  ),
);

@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }
  @return $map;
}

@function get-scales($name, $device-type: "mobile") {
  @return map-deep-get($scales-map, $name, $device-type);
}

@mixin generate-font-sizes($name: "quran") {
  $mobile-scales: null;
  $desktop-scales: null;
  // if the current name has values other than the default ones
  @if map.has-key($scales-map, $name) {
    $mobile-scales: get-scales($name);
    $desktop-scales: get-scales($name, "desktop");
  } @else {
    $mobile-scales: get-scales("default");
    $desktop-scales: get-scales("default", "desktop");
  }

  @for $i from 1 through constants.$maximum-font-step {
    .#{$name}-font-size-#{$i} {
      font-size: calc(#{map.get($mobile-scales, $i)} * var(--font-size-normal));
      @include breakpoints.tablet {
        font-size: calc(
          #{map.get($desktop-scales, $i)} * var(--font-size-normal)
        );
      }
    }
  }
}

// Sets a max-width based on the device width. Inspired by the bootstrap container (https://getbootstrap.com/docs/5.0/layout/containers/).
$large-device-width-ratio: 95%;
$max-container-width: 112rem;
@mixin container() {
  width: 100%;

  @include breakpoints.tablet {
    width: $large-device-width-ratio;
    max-width: $max-container-width;
  }
}
